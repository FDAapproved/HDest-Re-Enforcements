//------------------------------------------------------------------------------
// The warmest place to hide... is Frag. 
//------------------------------------------------------------------------------

// For mappers. Uncomment and add thingids as needed.
/*
class InnocentMimicBarrel : HDMimicBarrel
{
	default
	{
		hdbarrel.musthavegremlin -1;
	}
}


class KillerMimicBarrel : HDMimicBarrel
{
	default
	{
		hdbarrel.musthavegremlin 1;
	}
}
*/



class MimicBarrel : HDBarrel
{ 
//$Category "Monsters/Hideous Destructor"
//$Title "Mimic Barrel"
//$Sprite "BAR1A0"
	  int timetowait;
	  int time_i;
	  int lastshouted;
	  
	  // For controlling disguises and wakeup.
	  bool bisamogus;
	  bool bhasawaken;
	  
	  // Inherited from cvars, control whether barrels are easy to spot. 
	  bool bisobvious;
	  
	  default
	  {
			+solid +shootable
			+activatemcross +canpass +nodropoff
			+fixmapthingpos +dontgib
			+hdmobbase.doesntbleed
			-countkill
			-ismonster
			+hdmobbase.noshootablecorpse
			+hdmobbase.climber
			damagefactor "hot",1.2;
			damagefactor "cold",1.2;
			damagefactor "Balefire",0.1;
			radius 11;height 34;
			speed 12;
			health 100;mass 200;gibhealth 200;
			maxdropoffheight 48;
			maxstepheight 4;
			painchance 256;
			pushfactor 0.1;
			meleethreshold 20;
			deathsound "world/barrelx";
			translation "176:191=96:111","64:79=104:111";
			painsound "barrel/pain";
			bloodcolor "ba ff 86";bloodtype "NotQuiteBloodSplat";
			obituary "%o got cream of canned!";
			
			// Not evil at all :) I promise. 
			tag "barrel";
	   }
   
   // Attaches a dynsmic light.
   override void postbeginplay()
   {
		super.postbeginplay();
		bhasawaken = false;
   }
   
 
   override void tick()
   {
	super.tick();
	if(isFrozen())return;

    // Forces barrels to persue you.
	bfrightened=false;
	
	
	// Occasionally screams.
	// Only ever is fully called whenever lastshouted is 0;
	if(!lastshouted && health > 0 && vel != (0,0,0) && !(random(0, 150)))
	{
		A_StartSound("barrel/pain",CHAN_BODY);
		lastshouted = 106;
	}
	
	// Resets lastshouted to 0 after 106-1 ticks. 
	if(lastshouted)lastshouted = lastshouted-1;
	
   }
   
   // In case this class ever needs it. 
   	void A_MimicBarrelCheckCrowd()
	{
		int bcc=0;
		barrelexplodemarker bpm;
		thinkeriterator bexpm=ThinkerIterator.create("BarrelExplodeMarker");
		while(bpm=barrelexplodemarker(bexpm.next(true))){
			bcc++;
			if(bcc>random(1,12)){
				setstatelabel("waittoexplode");
				break;
			}
		}
	}



	// Leaping and pouncing functions. 
 	void A_MimicBarrelMove()
	{
		if(floorz!=pos.z)return;
		A_FaceTarget();
		angle+=random(-150,150);
		A_StartSound("barrel/walk",CHAN_BODY);
		vel+=(cos(angle),sin(angle), 0) * random(1,4);
		vel+=(0,0, frandom(0, 1) * 2);
		setstatelabel("Jumped");
	}
 	void A_MimicBarrelMoveKill()
	{
		if(floorz!=pos.z)return;
		A_FaceTarget();
		angle+=random(-15,15);
		A_StartSound("barrel/walk",CHAN_BODY);
		vel+=(cos(angle),sin(angle), 0) * 3;
		vel+=(0,0,2);
	}
	
  States
  {
	  // Seeming sus lately... 
	  Impostor:
			#### # 0
			{
					if(!bisobvious)
					{
						bisamogus=false;
						setstatelabel("Spawn");
						return;
					}
					if(!bisamogus)bisamogus=true;
					if(bhasawaken)bhasawaken=false;
			}
	  ImpostorIdle:
			BALE AE 10;
			BALE E 0
			{
				if(!(random(0, 150)) && vel == (0,0,0))
				{
					A_MimicBarrelMove();
				}
			}
			Loop;


	  // Removed 'look' since if this could look, it'd see and then run at you. 
	  Spawn:
			BAR1 A 0 NODELAY;
			#### # 0
			{
				if(time_i != 0)setstatelabel("AwakenLoop");
				if(bhasawaken)bhasawaken=false;
				if(bisamogus)setstatelabel("Impostor");
			}
	  SpawnIdle:
			BAR1 AB 10;
			BAR1 B 0
			{
				if(!(random(0, 150)) && vel == (0,0,0))
				{
					A_MimicBarrelMove();
				}
			}
			Loop;
	  // Transitions the barrel into living (sicko) mode. 
	  Awaken:
			BALE A 0
			{
				timetowait = (invoker.health/4);
				timetowait = random(timetowait, timetowait*2);
				time_i     = 0;
				A_Recoil(frandom(-0.80, 0.80));
			}
	 AwakenLoop:
			BALE AE 4
			{
				time_i++;
			}
			BALE E 0 A_JumpIf(time_i < timetowait, "AwakenLoop");
			BALE B 1
			{
				bhasawaken = true;
				A_HDLook();
				if(!target)setstatelabel("Gaze");
			}
			goto See;
	  
	  Jumped:
			BALE C 2
			{
				invoker.frame+=random(-1,1);
			}
			goto impostor;
	  See:
		BALE BCD 3
		{

			if(target)
			{
				// Update target pointer. 
				A_HDLook();
				
				// Pounce!
				if(Distance3D(target)<=meleethreshold && !random(0,5))
				{
					setstatelabel("Explode");
				}
				
				A_HDChase(meleestate: "Explode",speedmult:frandom(1,1.4));
			}
			else
			{
				setstatelabel("Gaze");
			}

		}
		BALE D 0 A_JumpIfTargetInLOS("see");
		BALE D 0 A_Jump(110, "see");
		BALE D 0 A_Jump(30, "spawn");
		goto gaze;
		
	 Gaze:
		BALE BCD 3 A_HDLook();
		BALE D   1
		{
			if(target)
				setstatelabel("see");
			else
				A_Jump(110, "impostor");
		}
		loop;
	 
	  Explode:
		BALE A 1 DamageThing(invoker.health,0);
		goto death;
	  Pain:
		#### # 0
		{
			A_Pain();
			if(!bhasawaken)
			{
				if(target)
				{
					// Kills you if you're dragging the barrel.
					if(vel != (0,0,0) && Distance3D(target) <= 10)
					{
						setstatelabel("Explode");
						return;
					}
				}
				
				setstatelabel("Awaken");
			}
		}
		BALE C 2
		{
			invoker.frame+=random(-1,1);
			
			// Leap.
			if(target)
				A_MimicBarrelMoveKill();
			
			// See you in hell!
			if(target && (Distance3D(target)<=meleethreshold*frandom(1,1.2)) && !random(0,10))
			{
				setstatelabel("Explode");
			}
		}
		BALE C 2
		{
			invoker.frame+=random(-1,1);
		}
		Goto See;
		
	// Death states from the normal barrel, minus the random explosion delay. 
	death:
		BALE A 0;
		---- A 0 A_NoBlocking();
		---- A 0 A_SetSize(-1,default.height);
	waittoexplode:
		---- A 0 A_SetSolid();
		---- A 0 A_SetShootable();
		---- AAAAAA random(1,2);
		---- A random(1,2);
	reallyexplode:
		BEXP C 0
		{
			A_UnsetSolid();
			A_UnsetShootable();
			A_NoBlocking();
			A_SetSize(-1,deathheight);
			bsolid=false;
			new("BarrelExplodeMarker");

			//set counter for spawning chunks in a crowd
			stamina=0;
			blockthingsiterator a=blockthingsiterator.create(self,320);
			while(a.next()){
				if(
					a.thing is "BarrelExplodeMarker"
				){
					stamina++;
				}
			}

			actor xpl=spawn("HDExplosionLight",pos,ALLOW_REPLACE);
			xpl.target=self;xpl.stamina=256;
		}
		BEXP CCC 1 bright{
			if(stamina<3){
				for(int i=0;i<16;i++){
					actor aaa=spawn("HugeWallChunk",(pos.xy,pos.z+frandom(0,height)),ALLOW_REPLACE);
					aaa.vel=(frandom(-10,10),frandom(-10,10),frandom(4,20));
					if(aaa.vel dot aaa.vel < 100)
						aaa.A_SetTranslation((KillerFireCan(self)||random(0,2))?"Charred":"Booger");
					aaa.scale*=frandom(0.8,1.8);
				}
			}
			actor a=spawn("HDExplosion",self.pos+(random(-2,2),random(-2,2),random(12,32)),ALLOW_REPLACE);
			a.vel=self.vel+(random(-1,1),random(-1,1),random(-1,2));
		}
		BEXP C 0 A_BarrelBlast();
		BEXP D 2 bright{
			if(painsound!="barrel/pain")A_SpawnItemEx("BFGNecroShard",0,0,24,0,0,8,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,64);
			A_SpawnChunks("HDSmokeChunk",random(2,5),7,16);
			A_Scream();
			DistantQuaker.Quake(self,6,42,512,10);
			A_StartSound("world/explode");
			DistantNoise.Make(self,"world/rocketfar");
		}
		BEXP EEEEEEE 0 A_SpawnItemEx ("HDSmoke", random(-6,6),random(-6,6),random(12,32), vel.x+random(-1,1),vel.y+random(-1,1),vel.z+random(1,2), 0,168);
		BEXP EEE 2 bright A_FadeOut(0.3);
		POB1 A 0
		{
			A_SetSize(-1,8);
			A_SetScale(0.7);
			A_SetRenderstyle(1,Style_Normal);
			setstatelabel("dying");
			A_GiveInventory("Heat",6660);
			bshootable=true;
			bpushable=false;
			bbright=false;
		}
	dying:
		POB1 AAAAAAA 50{
			A_Immolate(self,self.target,random(12,24));
			if(!random(0,2)) A_SpawnChunks("HDSmokeChunk",1,2,12);
		}
		POB1 A -1{
			A_StartSound("vile/firestrt",CHAN_AUTO,volume:0.4);
			A_SpawnChunks("HDSmoke",8,0,3);
		}stop;
	}
}