class BioMechEvent : eventhandler
{


	private bool cvarsAvailable;

	private int  spawnBiasActual;
	private int  majorSpawnBiasActual;
	private bool isPersistent;
	
	
	// Shoves cvar values into their non-cvar shaped holes.
	// I have no idea why names for cvars become reserved here.
	// But, this works. So no complaints. 
	void init()
	{
		cvarsAvailable = true;
		spawnBiasActual         = bio_spawn_bias;
		majorSpawnBiasActual    = bio_major_spawn_bias;
		isPersistent            = bio_persistent_spawning;
	}
	
	
	// 'Initalizes' the event handler,
	// In my testing, this is called after events are fired. 
	override void WorldLoaded(WorldEvent e)
	{
		// always calls init.
		init();
		super.WorldLoaded(e);
	}

	bool giverandom(int chance)
	{
		bool result = false;
		
		// temp storage for the random value. 
		int iii = random(0, chance);
		
		// force negative values to be 0. 
		if(iii < 0)
			iii = 0;
			
		
		if (iii == 0)
		{
			if(chance > -1)
				result = true;
		}
		
		return result;
	}



string trycreatemech(string fallback, int chance)
	{
		
		string tospawn = fallback;
		if(giverandom(majorSpawnBiasActual))
		{
			tospawn = "BiomechanoidMajor";
		}
		else if(giverandom(chance))
		{
			tospawn = "BiomechanoidMinor";
		}
		return tospawn;
	}

override void checkreplacement(replaceevent e)
 {
	// Makes sure the values are always loaded before
	// taking in events.
	if(!cvarsAvailable)
		init();
		
 	// in case it's not real. 
	if(!e.Replacee)
	{
		return;
	}
	
	// Don't spawn anything if the level has been loaded more than a tic. 
	if (!(level.maptime > 1) || isPersistent)
	{
		switch(e.Replacee.GetClassName())
		{
			case 'TechnoSpider':
				e.replacement = trycreatemech("TechnoSpider", spawnBiasActual);
				break;
		}
	}
}


override void checkreplacee(replacedevent e)
{
	switch(e.Replacement.GetClassName())
	{
		case 'BiomechanoidMinor':
		case 'BiomechanoidMajor':
			e.replacee = trycreatemech("TechnoSpider", spawnBiasActual);
			break;
	}
}

}