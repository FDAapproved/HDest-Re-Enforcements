extend class HDRERevolver
{

	virtual void A_HDWRevolverLoadAmmo(bool use355, bool playsound=true)
	{	
		// do a little spin
		A_HDWRevolverCycle(false, playsound);
		
		// load the gun.
		if(!(__cylinder[5]))
		{
				if(use355)
					__cylinder[5] = REV_355;
				else
					__cylinder[5] = REV_9MM;
				
				A_StartSound("weapons/deinoload",8,CHANF_OVERLAP);
				
		}
	}
	
	
	virtual void A_HDWRevolverLoadFinish()
	{
		__unloaded = false;
		A_StartSound("weapons/deinoclose",8);
	}
	
	
	// Mimics the revolver's unloading state. 
	virtual void A_HDWRevolverUnloadAmmo()
	{
		// forcibly uncocks.
		if(__cocked)
			A_HDWRevolvercockHammer();
		
		A_StartSound("weapons/deinoload",8,CHANF_OVERLAP);
		
		bool emptied    = false;
		bool loosed     = true;

		
		// loose round actor pointer.
		actor  aaa;
		double cosp;
		
		// shoots some casings (a little).
		for(int i = 0; i < REV_SIZE; i++)
		{
			// Empties rounds.
			switch(__cylinder[i])
			{
				case REV_9MM_SPENT:
					cosp=cos(pitch);
					aaa=spawn("HDSpent9mm",
					(pos.xy,pos.z+height-10)
					+(cosp*cos(angle),cosp*sin(angle),sin(pitch))*7,
					ALLOW_REPLACE);
					aaa.vel=vel+(frandom(-1,1),frandom(-1,1),-1);
					aaa.angle=angle;
					emptied = true;
					break;
				case REV_355_SPENT:
					cosp=cos(pitch);
					aaa=spawn("HDSpent355",
					(pos.xy,pos.z+height-10)
					+(cosp*cos(angle),cosp*sin(angle),sin(pitch))*7,
					ALLOW_REPLACE);
					aaa.vel=vel+(frandom(-1,1),frandom(-1,1),-1);
					aaa.angle=angle;
					emptied = true;
					break;
			}
			if(emptied)
			{
					__cylinder[i] = 0;
					loosed        = true;
			}

		}
		
		if(loosed)
			A_StartSound("weapons/deinoeject",8,CHANF_OVERLAP);
		
		__unloaded   = true;

	}
}