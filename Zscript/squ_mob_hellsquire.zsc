// -----------------------------------------------------------------------------
// Shield Little Knightmares!
// -----------------------------------------------------------------------------

// Copy of PAINMONSTER
class minipainmonster : HDREimp
{
	default
	{
		meleesound "baron/melee";
		bloodcolor "44 99 22";
		+hdmobbase.biped
		species "BaronOfHell";
	}
	override void postbeginplay()
	{
		super.postbeginplay();
		bsmallhead=bplayingid;

		if(!bplayingid)
		{
			for(int i=0;i<MAXPLAYERS;i++){
				let hdp=hdplayerpawn(players[i].mo);
				if(hdp)CopyBloodColor(hdp);
			}
		}
	}
	override double bulletresistance(double hitangle)
	{
		return super.bulletresistance(hitangle);
	}
}


// Wrapper for old name.
class HDHellSquire : hellsquire
{}

class HellSquire : minipainmonster
{
	int potentialthreshold;
	
	int guts;
	int subguts;
	default
	{
		height      60;
		radius      14;
		mass       600;
		painchance 100;
		health     150;
		
		seesound    "squire/sight";
		activesound "knight/active";
		painsound   "knight/pain";
		deathsound "squire/death";
		obituary    "%o was fired by a'squired.";
		hitobituary "%o ate shield and died.";
		tag "Hell Squire";

		damagefactor "balefire", 0.3;
		damagefactor "hot",      0.8;
		damagefactor "cold",     0.7;
		hdmobbase.shields 350;
		scale 0.9;
		speed 8;
		meleedamage 10;
		meleerange  56;
		minmissilechance 42;

		+hdmobbase.climber
		maxdropoffheight 64;

		stamina 0;
	}

	override double bulletshell(vector3 hitpos,double hitangle){
		return frandom(3,7);
	}
	override double bulletresistance(double hitangle){
		return max(0,frandom(0.8,1.)-hitangle*0.008);
	}

	override void postbeginplay()
	{
		super.postbeginplay();
		// They are very small. So very, very small. 
		resize(0.5,0.7);
		
		// Cowards. 
		guts    = 0;
		subguts = 0;
		
		// ...But with a seed of courage. 
		potentialthreshold = random(25, 35);
	}
	double targetingangle;double targetingpitch;
	double targetdistance;

	states{
	spwander:
		BOS6 ABCDABCD 7 A_HDWander();
		BOS6 A 0{
			if(!random(0,1))setstatelabel("spwander");
			else A_Recoil(-0.4);
		}//fallthrough to spawn
	spawn:
		BOS6 ABCD 12 A_HDLook();
		BOS6 A 0{
			if(bambush)setstatelabel("spawn");
			else{
				A_SetTics(random(1,3));
				if(!random(0,5))A_StartSound("knight/active",CHAN_VOICE);
				if(!random(0,5))setstatelabel("spwander");
			}
		}loop;
	see:
		BOS6 ABCD 4 A_HDChase();
		loop;
	pain:
		BOS6 H 2;
		BOS6 H 2
		{
			A_Pain();
			A_SetTics(random(15,30));
		}
		---- A 0 setstatelabel("see");
	pain.balefire:
		BOS6 H 3{
			A_Recoil(0.4);
			GiveBody(20);
			if(!random(0,3))A_KillChildren();
		}
		goto pain;
	missile:
		BOS6 ABCD 3
		{
			A_FaceTarget(30);
			if(A_JumpIfTargetInLOS("null",10))setstatelabel("shoot");
		}
		BOS6 E 0 A_JumpIfTargetInLOS("shoot",10);
		BOS6 E 0 A_JumpIfTargetInLOS("missile");
		---- A 0 setstatelabel("see");
	shoot:
		BOS6 E 0
		{
			if(target)
				targetdistance=distance3d(target);
			else
				targetdistance=0;
		}
		goto fireball;
	fireball:
		BOS6 FE 3 A_FaceTarget(60,60);
		BOS6 E 2
		{
			A_FaceTarget(6,6);
			targetingangle=angle;targetingpitch=pitch;
		}
		BOS6 E 3
		{
			A_FaceTarget(6,6);

			if(target&&targetdistance<(25*35*7))
			{
				double adj=targetdistance*frandom(0.008,0.032);
				angle+=deltaangle(targetingangle,angle)*adj;
				if(target.bfloat)
					pitch+=deltaangle(targetingpitch,pitch)*adj;
				else
					pitch+=clamp(deltaangle(targetingpitch,pitch)*adj,-10,10);
			}
			else
			{
				angle+=frandom(-4.,4.);
				pitch+=frandom(-0.1,0.1);
			}
		}
		BOS6 F 1;
		BOS6 G 4 bright
		{
			bool hasthrown = false;
			if(guts>potentialthreshold)
			{
				if(subguts>3)
				{
					// High potential, high cooldown.
					// Low potential, low cooldown. 
					A_Settics(potentialthreshold - 10);
					
					
					A_StartSound("squire/sight", CHAN_BODY, CHANF_OVERLAP, 1);
					double oradius=invoker.radius;
					double oheight=invoker.height;
					vector3 ovel=invoker.vel;
					for(int i=0;i<10;i++){
						vector3 rpos=invoker.pos+(
							frandom(-oradius,oradius),
							frandom(-oradius,oradius),
							frandom(0,oheight)
						);
						actor spk=actor.spawn("ShieldSpark",rpos,ALLOW_REPLACE);
						spk.vel=(frandom(-2,2),frandom(-2,2),frandom(-2,2))+ovel;
					}
					actor aaa;int bbb;
					[bbb,aaa]=A_SpawnItemEx("BaleBall",
						0,0,invoker.height * 0.90,
						cos(pitch)*25,0,-sin(pitch)*25
					);
					aaa.vel+=vel;aaa.tracer=target;
					hasthrown = true;
					subguts = 0;
				}
				else
				{
					subguts++;
				}
			}
			else
			{
				guts++;
			}
			if(!hasthrown)
			{
				actor aaa;int bbb;
				[bbb,aaa]=A_SpawnItemEx("SquireFireBall",
					0,0,invoker.height * 0.90,
					cos(pitch)*25,0,-sin(pitch)*25
				);
				aaa.vel+=vel;aaa.tracer=target;
			}
		}
		BOS6 GF 5;
		BOS6 H 1
		{
			int randomized = random(8,18);
			A_SetTics(randomized);
		}
		BOS6 A 0 A_JumpIf(firefatigue>HDCONST_MAXFIREFATIGUE*1.6,"pain");
		// Always is tired.
		BOS6 A 0 A_Jump(115,"pain");
		---- A 0 setstatelabel("see");
	melee:
		BOS6 E 6 A_FaceTarget();
		BOS6 F 2;
		BOS6 G 6{
			A_CustomMeleeAttack(random(20,40),"baron/melee","","claws",true);
			if(!random(0,3))return;
			actor aaa;int bbb;
			[bbb,aaa]=A_SpawnItemEx("SquireFireBall",
				0,0,invoker.height * 0.90,
				8,0,-12
			);
			aaa.vel+=vel;
		}
		BOS6 F 5;
		---- A 0 setstatelabel("see");
	death:
		BOS6 I 8;
		BOS6 J 8 A_Scream();
		BOS6 KLMN 8;
		BOS6 O -1 A_BossDeath();
		stop;
	death.maxhpdrain:
		BOS6 P 5 A_StartSound("misc/gibbed",CHAN_BODY);
		BOS6 PQRSTUV 5;
		BOS6 V -1;
		stop;
	raise:
		BOS6 ONMLKJI 5;
		BOS6 H 8 A_StartSound("squire/sight",CHAN_VOICE);
		goto see;
	}
}


