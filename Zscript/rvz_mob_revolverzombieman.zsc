//------------------------------------------------------------------------------
// More than enough to kill anything that moves... and that you hit. With bulle-
//------------------------------------------------------------------------------

// For mappers. Uncomment these if you want to use them in a map, and 
// tweak thingids accordingly.
/*
class RevolverZombieman9mm : RevolverZombieman 21222
{
	override void postbeginplay()
	{
		super.postbeginplay();
		A_setpreference(false);
		A_HDWRevolverRandomizeAmmo();

	}	
}

class RevolverZombieman355 : RevolverZombieman 21223
{
	override void postbeginplay()
	{
		super.postbeginplay();
		A_setpreference(true);
		A_HDWRevolverRandomizeAmmo();
	}
}
*/

// Where the magic happens. 
class RevolverZombieman : HDRERevolver
{

	int firestatus;
	int timestoreload;
	bool tampered;
	
	default
	{
		Health 100;
		Radius 20;
		// Height when alive.
		Height      56;
		
		// Height as a corpse. 
		deathheight 4;
		
		Speed 8;
		Mass 100;
		PainChance     250;
		Meleethreshold  40;
		
		
		HDREZombieman.AimTimeNormal  20;
		HDREZombieman.AimTimePained  35;
		HDREZombieman.FocusFactor     4;
		
		MONSTER;
		+FLOORCLIP;
		+MISSILEMORE;
		Obituary    "%o was filled with a six-shooting sinner's lead.";
		HitObituary "%o wasn't lucky (punk).";
		Tag "Zombieman (Revolver)";


		seesound    "zocelot/sight";
		painsound   "zocelot/pain";
		deathsound  "zocelot/death";
		activesound "zocelot/active";
	}
	

	
	override void postbeginplay()
	{
		super.postbeginplay();
		
		// For the wild zombiespawn w/o eventhandler help.
		// Realistically this is never ran.
		if(!tampered)
		{
			A_setpreference(bool(random(0,1)));
			A_HDWRevolverRandomizeAmmo();
		}
	}
	
	// For cleanly setting a mob's ammo preference,
	// changing this to use other ammos requires a different passed value. 
	void A_setpreference(bool value)
	{
		pref355  = value;
		tampered = true;
	}
	
	
	override void A_HDForget()
	{
		// Removes focus.
		Super.A_HDForget();
 
		// Conditionally goes back to reload animations.
		// Also makes revolver zombies more persistent. 
		if(A_HDWRevolverIsNotFullyLoaded() && !random(0,1))
		{
			setstatelabel("Unloading");
		}
		
		return;
	}
	
	States
	{
	
	// Initalization and default behavior. 
	// This really is just a landingpad for dead versions of the actor. 
	Spawn:
			TNT1 A 0;

		
	Idle:
	SpawnIdle:
			// Look around for a random amount of time. 
			HARY A 0
			{
				A_HDLook();
				A_Recoil(frandom(-0.1,0.1));
			}
			HARY EEE 1
			{
				A_SetTics(random(5,17));
				A_HDLook();
			}
			HARY E 1
			{
				A_Recoil(frandom(-0.1,0.1));
				A_SetTics(random(10,40));
			}
			
			// Randomly alternate behaviors. 
			HARY B 0 A_Jump(28,"SpawnGrunt");
			HARY B 8 A_Recoil(frandom(-0.2,0.2));
			HARY B 0 A_Jump(132,"spawnswitch");
			Loop;
	
	
	
	SpawnSwitch:
			// use the default spawnstill state if this enemy is ambushing.
			TNT1 A 0 A_JumpIf(bambush,"spawnstill");
			Goto SpawnWander;
		
		
		
	// Wander around. 
	SpawnWander:
		HARY AABB 5 A_HDWander;
		HARY A 0
		{
			if(!random(0,127))
			{
				A_Vocalize(activesound);
			}
			A_HDLook();
		}
		TNT1 A 0 A_Jump(80, "Spawn");
		Loop;
	
	
	
	// Make a noise. 
	SpawnGrunt:
		HARY A 1
		{
			A_Recoil(frandom(-0.4,0.4));
			A_SetTics(random(30,80));
			if(!random(0,7))
			{
				A_Vocalize("grunt/active");
			}
		}
		goto SpawnIdle;
	
	
	
	// Don't move at all. 
	SpawnStill:
		HARY A 0  A_HDLook();
		HARY A 0  A_Recoil(random(-1,1)*0.4);
		HARY AB 5 A_SetAngle(angle+random(-4,4));
		HARY A 0
		{
			A_HDLook();
			if(!random(0,127))
				{
					A_Vocalize(activesound);
				}
		}
		HARY AB 5 A_SetAngle(angle+random(-4,4));
		HARY A 1  A_SetTics(random(10,40));
		goto SpawnIdle;
	
	
	
	See:
			
			// Just in case. 
			HARY A 0 A_JumpIf(A_HDWRevolverIsUnloaded(), "ReloadingFinished");
			HARY A 0;
			HARY AABB 3 A_hdChase();
			TNT1 A 0;
			HARY CCDD 3 A_hdChase();
			TNT1 A 0;
			TNT1 A 0 A_Jump(24,"SeeRoam");
			Loop;
	
	
	
	SeeRoam:
		HARY E 3 A_Jump(60,"SeeRoam2");
		HARY E 4 A_HDChase("melee","turnaround",CHF_DONTMOVE);
		HARY EEE 4 A_HDChase("melee","turnaround",CHF_DONTMOVE);
		HARY A 0 A_Jump(60,"SeeRoam");
		
	SeeRoam2:
		HARY A 0 A_Jump(8,"see");
		HARY ABCD 5 A_HDChase("Melee", "Missile", 0, 0.6);
		HARY A 0 A_Jump(140,"SeeRoam");
		HARY A 0 A_JumpIfTargetInLOS("see");
		loop;
		
	TurnAround:
		HARY A 0 A_FaceTarget(15,0);
		HARY E 2 A_JumpIfTargetInLOS("missile",40);
		HARY A 0 A_FaceTarget(15,0);
		HARY E 2 A_JumpIfTargetInLOS("missile",40);
		HARY ABCD 3 A_HDChase();
		goto See;
			
			
			
	SeePause:
			HARY E 20 A_JumpIf(firestatus < 1, "Unloading");
			Goto See;
			
			
	Unloading:
			HARY A 0
			{
				if(!random(0,127))
				{
					A_Vocalize(activesound);
				}
			}
			// Fetch bullets.
			HARY E 16 A_StartSound("weapons/pocket",3);
			HARY E 16 A_StartSound("weapons/pocket",3);
			
			// Jump to reload if already unloaded.
			TNT1 A 0 A_JumpIf(A_HDWRevolverIsUnloaded(), "Reloading");
			
			
			HARY E 24
			// unload the revolver here. 
			{
				A_SetTics(22 + random(15,18));
				timestoreload = 2;
				A_HDWRevolverUnloadAmmo();
			}
			// Reload here. 
	Reloading:
			HARY E 11;
			HARY E 0 
			{
				A_SetTics(11 + random(5,8));
				A_HDWRevolverLoadAmmo(pref355);
				firestatus = 1;
				timestoreload--;
			}
			TNT1 A 0 A_JumpIf(A_HDWRevolverisNotFullyLoaded() && timestoreload > 0, "Reloading");
	ReloadingFinished:
			HARY E 3
			{
				A_HDWRevolverLoadFinish();
			}
			Goto see;
	
	
	
	MissileCheck:
			TNT1 A 0 A_SpidRefire;
			Goto MissileFire;
			
			
	MissileAgain:
		goto Missile;
			
	Missile:
			// Cancels burst if out of ammo.
			TNT1 A 0 A_JumpIf(A_HDWRevolvernextShotExists() < 1, "SeePause");
	
	MissileWind:
			// Wind up.
			HARY E 1
			{
				if(!A_HDWRevolverIsCocked() && random(0,1))
					A_HDWRevolverCockHammer();
				A_HDAim();
			}
			
			
			// "How many bolts should be shot?"
			TNT1 A 0
			{
				burstNumber = random(1,2);
				burst_i     = 0;
			}
			
	// The actual shooting.
	MissileFire:
			// Fires one shot.
			HARY F 2 Bright
			{
				A_FaceTarget();
				// revolver is very low recoil.
				A_Recoil(frandom(0.1,0.15)); 
				A_HDWRevolverTryFire();
				firestatus = A_HDWRevolverNextShotExists();
				burst_i += 1;
			}
			
			// Winddown.
			HARY E 2
			{
				A_SetTics(random(3,12));
			}
			
			// Cancels burst if revolver is out of ammo.
			TNT1 A 0 A_JumpIf(firestatus < 1, "SeePause");

			// Chance to check for cover.
			TNT1 A 0 A_Jump(80, "MissileCheck");
			
			// Loops until burst is complete.
			TNT1 A 0 A_JumpIf(burst_i < BurstNumber, "MissileFire");
			
			// Chance to fire again.
			TNT1 A 0 A_Jump(80, "MissileAgain");
			Goto MissilePost;
			
			
			
	MissilePost:
	TurnToAim:
		HARY E 2 A_HDTurn();
		HARY A 0 A_JumpIfTargetInLOS("SeePause");
		HARY A 0 A_JumpIfTargetInLOS("SeePause",10);
		loop;


	
	// Zombies only have a singular 'weapon whack' melee attack. 
	Melee:
		HARY C 8 A_FaceTarget();
		HARY D 4;
		HARY E 4 A_CustomMeleeAttack(random(3,20),"weapons/smack","","none",randompick(0,0,0,1));
		goto See;
	
	
	
	
	Pain:
			// Shout and alert nearby enemies. 
			HARY G 2;
			HARY G 3 A_Vocalize(painsound);
			HARY G 0 
			{
				A_ShoutAlert(0.1,SAF_SILENT);
				
				// Goto see if the enemy is nearby. 
				// Run otherwise. 
				if(target && distance3d(target) < 100)
				{
					setstatelabel("see");
				}
				else
				{
					bfrightened = true;
				}
			}
			// Run after being hit (direction depends on fear state). 
			HARY ABCD 2 A_HDChase();
			
			// Become fearless again.
			HARY G 0
			{
				bfrightened = false;
			}
			
			// In case an enemy was hit while reloading. 
			HARY G 0 A_JumpIf(A_HDWRevolverisUnloaded(), "ReloadingFinished");
			goto See;
	
	
	
	// Incapcatitation State. 
	falldown:
		HARY H 5;
		HARY I 5 A_Vocalize(deathsound);
		// Toppling over. 
		HARY JJKKK  2 A_SetSize(-1,max(deathheight, height-10));
		HARY L 0      A_SetSize(-1,deathheight);
		HARY L 10     A_KnockedDown();
		wait;
	
	
	
	// Stabilization State. Entered by A_KnockedDown, presumably. 
	standup:
		HARY K 6;
		HARY J 0  A_Jump(160,2);
		HARY J 0  A_Vocalize(seesound);
		HARY JI 4 A_Recoil(-0.3);
		HARY HE 6;
		goto See;



	Death:
		HARY H  5;
		HARY I  5 A_Vocalize(deathsound);
		HARY JK 5;

	SpawnDead:
	Dead:
		TNT1 A 0;
		
		
		
	DeadCorpse:
		// For body 'physics' when falling. 
		HARY K 3 canraise
		{
			if(abs(vel.z)<2.0)
			{
				frame += 1;
			}
		}
		HARY L 5 canraise
		{
			if(abs(vel.z)>=2.0)
				{
					setstatelabel("DeadCorpse");
				}
		}
		wait;
	
	
	
	// The living xdeath. Makes cover. 
	Gib:
		HARY M 5;
		HARY N 5
		{
			A_GibSplatter();
			A_NoBlocking();
			A_XScream();
		}
		HARY OP   5 A_GibSplatter();
		HARY QRST 5;
		goto gibbed;



	// Falls down into Gibbed. Doesn't make cover. 
	DeadGib:
		HARY M 5;
		HARY N 5
		{	
			A_NoBlocking();
			A_XScream();
		}
		HARY OPQRST 5;



	Gibbed:
		HARY U 3 canraise A_JumpIf(abs(vel.z)<2.0, 1);
		HARY V 5 canraise A_JumpIf(abs(vel.z)>=2.0, "gibbed");
		wait;
	



	// The raise state.
	Raise:
		HARY L    4;
		HARY LK   6;
		HARY JIHA 4;
		Goto See;
	
	
	
	// Ungib (for archviles/frag). 
	Ungib:
		HARY V      5;
		HARY U      3;
		HARY TSRQPO 5;
		HARY K      5;
		HARY JIHA   5;
		goto See;
	}
}



// Corpse. 
class RevolverZombiemanCorpse : RevolverZombieman 
{
	States
	{
		Spawn:
		// Then they die. The end.
		TNT1 A 0 A_HDDie();
	}
}