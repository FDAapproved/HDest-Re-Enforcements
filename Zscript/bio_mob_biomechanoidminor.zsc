class BiomechanoidMinor : HDREArachnotron
{
	// Projectile to fire. 
	class<actor> blast;
	property blast : blast;
	default
	{
		// For dead simple. 
		+MAP07BOSS2;
		Health 500;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 50;
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		+hdmobbase.climber;
		maxdropoffheight 64;
		maxstepheight 10;
		+missilemore;
		+missileevenmore;
		-hdmobbase.headless;
		minmissilechance 2;
		tag "Biomech (Minor)";
		SeeSound    "baby/sight";
		PainSound   "baby/pain";
		DeathSound  "baby/death";
		ActiveSound "baby/active";
		Obituary "%o suffered a death in see-minor.";
		BiomechanoidMinor.Blast "biomechanoidPlasma";
	}
	
	int volley_i;
	int windup_i;
	int shootheight;
	int shootwidth;
	override void postbeginplay()
	{
		super.postbeginplay();
		
		// So they fit into spaces that arachnotrons normally do. 
		resize(0.65,0.80);
		shootheight = height*0.60;
		shootwidth  = radius*0.50;
	}
	
	States
	{
		AmbushRotate:
			---- A 0 A_StartSound("baby/walk");
			BIOM A 8 A_HDLook();
			BIOM B 8 A_SetAngle(angle+frandom(-12,12));
			BIOM C 8 A_HDLook();
			BIOM D 8 A_SetAngle(angle+frandom(-12,12));
		Ambush:
			BIOM C 10 A_HDLook();
			---- A 0 A_Jump(28,"ambushrotate");
		Spawn:
			BIOM A 0 A_JumpIf(bambush,"ambush");
			BIOM CCC 10 A_HDLook();
			---- A 0 A_Jump(192,"spawn","ambushrotate");
		SpawnWander:
			BIOM ABC 8 A_HDWander();
			---- A 0 A_SetAngle(angle+frandom(-8,8));
			BIOM DEE 8 A_HDWander();
			---- A 0 A_SetAngle(angle+frandom(-8,8));
			---- A 0 A_Jump(28,"spawn");
			loop;
			
		See:
			#### # 0
			{
				volley_i = random(4,7);
			}
		SeeLoop:
			#### # 0 A_Jump(78, "roam");
			BIOM AABBCCDD 3 A_HDChase();
			Loop;
	roam:
		BIOM AB 6 A_HDWander();
		BIOM C 6 A_HDWander(CHF_LOOK);
		---- A 0 A_Jump(48,"roamc");
	roam2:
		BIOM D 6 A_HDWander(CHF_LOOK);
		BIOM EE 6 A_HDWander();
		---- A 0 A_Jump(48,"roamf");
		---- A 0 A_JumpIfTargetInLOS("roamc");
		goto roam;
	roamc:
		BIOM C 4 A_HDChase("missile","missile",CHF_DONTMOVE);
		BIOM CCC 2 A_HDChase("missile","missile",CHF_DONTMOVE);
		---- A 0 A_Jump(48,1);
		loop;
		---- A 0 A_StartSound("baby/walk");
		goto roam2;
	roamf:
		BIOM E 4 A_HDChase("missile","missile",CHF_DONTMOVE);
		BIOM EEE 2 A_HDChase("missile","missile",CHF_DONTMOVE);
		---- A 0 A_Jump(48,"roam");
		loop;
			
		Melee:
		Missile:
			#### # 0
			{
				windup_i = random(20, 23) + (500/invoker.health)/10;
			}
			// Windup.
		MissileLoop:
			BIOM E 0
			{	
				A_SetTics(random(2,3));
				A_FaceTarget();
				windup_i--;
			}
			#### # 0 A_JumpIf(windup_i>1, "MissileLoop");
		
		MissileFire:
			// Checks if there's geometry in the way. 
			#### # 0 A_SpidRefire;
			// Decider.
			BIOM E 0
			{
				A_FaceTarget();
				
				// Check to see if a reload must happen. 
				if(battery<1)
				{
					setstatelabel("MustReload");
					return;
				}
				
				// Decrement battery.
				battery--;
				
				// Reset if the volley accumulator is 0.
				if(!volley_i)
				{
					setstatelabel("See");
					return;
				}

				// Fire both if divisible by 3. 
				if(!(volley_i%3))
				{
					setstatelabel("ShootBoth");
					return;
				}

				// Fire right if divisible by 2. 
				if(!(volley_i%2))
				{
					setstatelabel("ShootRight");
					return;
				}

				// Fire left otherwise. 
				setstatelabel("ShootLeft");
				return;
			}
			Goto See;

		ShootLeft:
			BIOM E 1
			{
				volley_i--;
				a_facetarget();
			}
			BIOM H 3 a_custommissile(Blast,shootheight,-shootwidth,0);
			goto MissileLoop;

		ShootRight:
			BIOM E 1
			{
				volley_i--;
				a_facetarget();
			}
			BIOM G 3 a_custommissile(Blast,shootheight,shootwidth,0);
			goto MissileLoop;

		ShootBoth:
			BIOM E 1
			{
				battery--;
				volley_i--;
				a_facetarget();
			}
			BIOM F 0 a_custommissile(Blast,shootheight,-shootwidth,0);
			BIOM F 3 a_custommissile(Blast,shootheight,shootwidth,0);
			goto MissileLoop;

	mustreload:
		BIOM E 10;
	reload:
		BIOM ABCDEE 4 A_HDChase(null,null,CHF_FLEE);
		BIOM AA 2 A_StartSound("baby/walk",CHAN_BODY);
		BIOM AAAAAAAA 6{
			vector3 bbb=pos+((cos(angle),sin(angle))*radius,42);
			for(int i=0;i<3;i++){
				double aaa=frandom(0,360);
				double ppp=frandom(-90,70);
				double cp=cos(ppp);
				vector3 vvv=(cp*cos(aaa),cp*sin(aaa),-sin(ppp));
				vector3 vvv2=vvv*frandom(20,40);
				
				if(random(0,1))
				{
					let fff=spawn("FragShard",bbb+vvv2,ALLOW_REPLACE);
					fff.vel=vel-vvv;
				}
			}
			A_StartSound("weapons/plasidle",CHAN_WEAPON,CHANF_OVERLAP);
			battery+=2;
		}
		BIOM A 8 A_StartSound("baby/sight",CHAN_WEAPON,CHANF_OVERLAP);
		BIOM A 0
		{
			battery=20;
			setstatelabel("see");
		}
	reloadend:
		goto see;


		Pain:
			#### # 0
			{
				volley_i = 0;
			}
			BIOM B 2;
			BIOM B 2 A_Vocalize(painsound);
			Goto See;
	death:
	deathactual:
		BIOM AAAAAAAA 0 A_SpawnItemEx("HugeWallChunk",frandom(-4,4),frandom(-4,4),frandom(28,34),frandom(-6,6),frandom(-6,6),frandom(-2,16),0,160,0);
		BIOM AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BigWallChunk",frandom(-3,3),frandom(-3,3),frandom(28,34),frandom(-2,2),frandom(-2,2),frandom(2,14),0,160,0);
		BIOM J 4     A_Scream();
		BIOM J 6     A_SpawnItemEx("MegaBloodSplatter",frandom(-10,10),frandom(-10,10),shootheight/2,0,0,0,0,160,0);
		BIOM J 10    A_SpawnItemEx("MegaBloodSplatter",frandom(-4,4),frandom(-4,4),shootheight/2,0,0,0,0,160,0);
		BIOM KLLLL 7
		{
			A_HDBlast(
			pushradius:56,pushamount:18,fullpushradius:6,
			immolateradius:18,immolateamount:random(3,6),
			immolatechance:80
			);
			A_SpawnItemEx("MegaBloodSplatter",0,0,shootheight/2,0,0,0,0,160,0);
		}
		BIOM L 0 A_SpawnItemEx("MegaBloodSplatter",0,0,shootheight/4,0,0,0,0,160,0);
		BIOM L 7;
		BIOM L -1 A_BossDeath();
	xdeath:
		stop;
	raise:
		BIOM LLLLLKJ 5;
		BIOM I 8;
		BIOM I 0 A_StartSound(seesound);
		BIOM AAABB 3 A_Chase(null,null);
		#### A 0 A_Jump(256,"see");
	death.maxphdrain:
		---- AAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BigWallChunk",frandom(-3,3),frandom(-3,3),frandom(28,34),frandom(-2,2),frandom(-2,2),frandom(2,14),0,160,0);
		BIOM J 10;
		BIOM KL 7;
		BIOM L -1;
	}
}
