	// An actual 'aim' function, which forces actors to wait before shooting. 
	// Enemies that have an aim windup should call a_HDAim with wait set to falce,
	// then set their own tics via a looping, presumably 1 tic wait function.
	// Something like:
	/*
	MissileWind:
		TNT1 A 0
		{
			A_SetUserVar("user_AimNumber", A_HDAim(false, ...<other parameters>);
			A_SetUserVar("user_MyCoolAimAccumulator", 0);
		}
	MissileWind2:
		<yourspritehere> E 1
		{
			A_FaceTarget;
			A_SetUserVar("user_MyCoolAimAccumulator", user_MyCoolAimAccumulator+1);
		}
		TNT1 A 0 A_JumpIf(user_MyCoolAimAccumulator < user_AimNumber, "MissileWind2");
		// If you write in zscript, you can use a regular variable += instead of A_SetUserVar().
	*/

extend class HDREZombieman
{
		virtual int A_HDAim
		(
			// Whether or not to wait with the produced aimtime. 
			bool wait=true,
			// Whether or not to use a custom aim # (and that #).
			bool usecustom=false, int customaimnormal=0, int customaimpained=0,
			
			// Whether or not to randomize the actor's aim (and optional custom #'s).  
			bool userandom=true, bool usecustomrandom=false,
			
			// Randomization can be positive and negative. 
			int r_min=0, int r_max=0,
			
			// Whether or not this actor gains or loses focus.
			bool willgainfocus=true, bool willlosefocus=false
		)
	{
		// Random offset for aiming.
		int aimrandom = 0;
		int aimfocus  = 0;
		int finalaim  = 0;
		int current_aim = 0;
		
		
		
		// Overwrites aim variable if not using a custom one.
		if(!usecustom)
		{
			if(__isPained)
			{
					current_aim  = AimTimePained;
					__isPained = false;
			}
			else
				current_aim = AimTimeNormal;
		}
		else
		{
			if(__isPained)
			{
					current_aim  = customaimpained;
					__isPained = false;
			}
			else
				current_aim = customaimnormal;
		}
	
	
	
		// Will only subtract focus if the actor has a non-zero aim. 
		if(__isFocused)
			aimfocus -= focusFactor;
		
		
		
		// Adds random aim time deviation. 
		if(userandom)
			{
				if(usecustomrandom)
					aimrandom += random(r_min, r_max);
				else
					aimrandom += random(1, current_aim/4);
			}
			
			
			
		// totals focus and random offsets together. 
		finalaim = current_aim - aimfocus + aimrandom;
		if(finalaim > 1)
			current_aim = finalaim;
		else
			current_aim = 0;
			
			
		// Actually aims.	
		if(wait)
		{
			// Calls face target first.
			A_FaceTarget();
			A_SetTics(current_aim);
		}
		
		// Whether or not this actor loses/gains focus.
		// Does nothing if both are true. 
		if(willgainfocus && !willlosefocus)
			__isFocused = true;
		if(willlosefocus && !willgainfocus)
			__isFocused = false;
			
		return current_aim;
	}
}