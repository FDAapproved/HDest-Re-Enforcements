//------------------------------------------------------------------------------
// CAN you dig it? I SAID, CA- *BOOM*
//------------------------------------------------------------------------------

// For mappers. Uncomment and add thingids as needed.
/*
class InnocentMimicCan : MimicCan
{
	default
	{
		hdbarrel.musthavegremlin -1;
		mimicbarrel.tampered = 1;
	}
}


class KillerMimicCan : MimicCan
{
	default
	{
		hdbarrel.musthavegremlin 1;
		mimicbarrel.tampered = 1;
	}
}
*/



class MimicCan : MimicBarrel
{
	int fireticker;
	default
	{
	
//$Category "Monsters/Hideous Destructor"
//$Title "Flaming Mimic Barrel"
//$Sprite "FCANA0"

		+bright
		health 100;
		translation "176:191=96:111","64:79=104:111";
		bloodcolor "ba ff 86";bloodtype "NotQuiteBloodSplat";
		
		// Could probably toggle between these? 
		//obituary "%o should try again. It's a killer fire CAN, not a killer fire CAN'T!";
		obituary "%o was cooked, canned and served.";
		attacksound "vile/firestrt";
		missiletype "BarrelFlame";
		hdbarrel.lighttype "HDFireCanLight";
		tag "burning barrel";
	}
	
   override void pb_configure()
   {
   		if(!tampered)
		{
			c_balespawnbias = cvar.getcvar("brl_firecan_fire_bias");
			int compare   = c_balespawnbias.getInt();
			
			if(HDREUtility.giveRandomBool(compare))
			{
				musthavegremlin = 1;
			}
			else if (compare == -1)
			{
				musthavegremlin = -1;
			}
			else if (compare != -2)
			{
				musthavegremlin = -1;
			}
		}
   }
	
	

	override void A_BarrelAttack(){
		A_FaceTarget(0,0);
		pitch-=random(1,12);
		if(
			HDMobAI.TryShoot(self,32,128,9,9)
		){
			if(distance3d(target)<256){
				setstatelabel("flamethrow");
				return;
			}else{
				A_StartSound(attacksound);
				A_SpawnProjectile("BarrelFlame",40,flags:CMF_AIMDIRECTION);
			}
		}
		else if(!random(0,10)){
			//move
			A_FaceTarget();
			angle+=random(-135,135);
			A_StartSound("barrel/walk");
			vel.xy+=(cos(angle),sin(angle))*5;
		}
		setstatelabel("inertjiggle");
	}
	override void tick()
	{
		super.tick();
		if(isFrozen())return;
		if(!bkilled){
			fireticker++;
			if(fireticker<6)return;
			fireticker=0;
			A_StartSound("misc/firecrkl",CHAN_BODY,CHANF_OVERLAP,volume:0.07);
			A_StartSound("misc/fwoosh",CHAN_BODY,CHANF_OVERLAP,volume:0.04,attenuation:0.6);
			actor a=spawn("HDSmoke",pos+(0,0,32),ALLOW_REPLACE);
			a.vel=vel+(frandom(-1,1),frandom(-1,1),frandom(2,3));
		}
	}
	override void A_BarrelBlast()
	{
		A_HDBlast(
			random(128,256),random(64,128),0,"hot",
			pushradius:256,pushamount:256,fullpushradius:0,pushmass:true,
			immolateradius:256,immolateamount:random(3,12),immolatechance:56
		);
		A_BarrelFrags();
	}
   
   
  States
  {
  
  
 	  // Seeming sus lately... 
	  Impostor:
			#### # 0
			{
				// Are you a monster??? 
				invoker.A_SusImpostor();
			}  
	  ImpostorIdle:
			BALF AE random(1,3);
			BALF E 0
			{
				invoker.A_TryTwitch(255);
			}
			Loop;

  
  
	  // Removed 'look' since if this could look, it'd see and then run at you. 
	  Spawn:
			FCAN A 0 NODELAY;
			#### # 0
			{
				if(time_i != 0)setstatelabel("AwakenLoop");
				if(hasawaken)hasawaken=false;
				// If a barrel has been found out, it continues to be as such.
				// There's a % chance this won't happen.
				if(isobvious || isamogus)
					setstatelabel("Impostor");
			}
	  SpawnIdle:
			FCAN AB random(1,3);
			FCAN A 0
			{
				if(!(random(0, 225)) && vel == (0,0,0))
				{
					A_MimicBarrelMove();
				}
			}
			Loop;
	  // Transitions the barrel into living (sicko) mode. 
	  Awaken:
			BALF A 0
			{
				timetowait = (invoker.health/4);
				timetowait = random(timetowait, timetowait*2);
				time_i     = 0;
				A_Recoil(frandom(-0.80, 0.80));
			}
	 AwakenLoop:
			BALF AE 4
			{
				time_i++;
			}
			BALF E 0 A_JumpIf(time_i < timetowait, "AwakenLoop");
			BALF B 1
			{
				hasawaken = true;
				A_HDLook();
				if(!target)setstatelabel("Gaze");
			}
			goto See;
	  Jumped:
			BALF C 2
			{
				invoker.frame+=random(-1,1);
			}
			goto impostor;
	  See:
		BALF BCD 3
		{

			if(target)
			{
				// Update target pointer. 
				A_HDLook();
				
				// Pounce!
				if(Distance3D(target)<=meleethreshold && !random(0,5))
				{
					setstatelabel("Explode");
				}
				
				A_HDChase(meleestate: "Explode",speedmult:frandom(1,1.4));
			}
			else
			{
				setstatelabel("Gaze");
			}

		}
		BALF D 0 A_JumpIfTargetInLOS("see");
		BALF D 0 A_Jump(110, "see");
		BALF D 0 A_Jump(30, "spawn");
		goto gaze;
		
	 Gaze:
		BALF BCD 3 A_HDLook();
		BALF D   1
		{
			if(target)
				setstatelabel("see");
			else
				A_Jump(110, "spawn");
		}
		loop;
	 
	  Explode:
		BALF A 1 DamageThing(invoker.health,0);
		goto death;
		
		Flamethrow:
			FCAN ABABABAB 2 bright
			{
				A_StartSound("misc/firecrkl");
				A_SpawnProjectile("BarrelFlame2",40,flags:CMF_AIMDIRECTION);
			}
			FCAN A 0 A_Jump(256,"spawn");


	  Pain:
		#### # 0
		{
			A_Pain();
			if(!hasawaken)
			{
				if(target)
				{
					// Kills you if you're dragging the barrel.
					if(vel != (0,0,0) && Distance3D(target) <= 10)
					{
						setstatelabel("Explode");
						return;
					}
				}
				
				setstatelabel("Awaken");
			}
		}
		BALF C 2
		{
			invoker.frame+=random(-1,1);
			
			// Leap.
			if(target)
				A_MimicBarrelMoveKill();
			
			// See you in hell!
			if(target && (Distance3D(target)<=meleethreshold*frandom(1,1.2)) && !random(0,10))
			{
				setstatelabel("Explode");
			}
		}
		BALF C 2
		{
			invoker.frame+=random(-1,1);
		}
		Goto See;
		
	// Death states from the normal barrel, minus the random explosion delay. 
	death:
		BALF A 0;
		---- A 0 A_NoBlocking();
		---- A 0 A_SetSize(-1,default.height);
	waittoexplode:
		---- A 0 A_SetSolid();
		---- A 0 A_SetShootable();
		---- AAAAAA random(1,2);
		---- A random(1,2);
	reallyexplode:
		BEXP C 0
		{
			A_UnsetSolid();
			A_UnsetShootable();
			A_NoBlocking();
			A_SetSize(-1,deathheight);
			bsolid=false;
			new("BarrelExplodeMarker");

			//set counter for spawning chunks in a crowd
			stamina=0;
			blockthingsiterator a=blockthingsiterator.create(self,320);
			while(a.next()){
				if(
					a.thing is "BarrelExplodeMarker"
				){
					stamina++;
				}
			}

			actor xpl=spawn("HDExplosionLight",pos,ALLOW_REPLACE);
			xpl.target=self;xpl.stamina=256;
		}
		BEXP CCC 1 bright{
			if(stamina<3){
				for(int i=0;i<16;i++){
					actor aaa=spawn("HugeWallChunk",(pos.xy,pos.z+frandom(0,height)),ALLOW_REPLACE);
					aaa.vel=(frandom(-10,10),frandom(-10,10),frandom(4,20));
					if(aaa.vel dot aaa.vel < 100)
						aaa.A_SetTranslation((KillerFireCan(self)||random(0,2))?"Charred":"Booger");
					aaa.scale*=frandom(0.8,1.8);
				}
			}
			actor a=spawn("HDExplosion",self.pos+(random(-2,2),random(-2,2),random(12,32)),ALLOW_REPLACE);
			a.vel=self.vel+(random(-1,1),random(-1,1),random(-1,2));
		}
		BEXP C 0 A_BarrelBlast();
		BEXP D 2 bright{
			A_SpawnChunks("HDSmokeChunk",random(2,5),7,16);
			A_Scream();
			DistantQuaker.Quake(self,6,42,512,10);
			A_StartSound("world/explode");
			DistantNoise.Make(self,"world/rocketfar");
		}
		BEXP EEEEEEE 0 A_SpawnItemEx ("HDSmoke", random(-6,6),random(-6,6),random(12,32), vel.x+random(-1,1),vel.y+random(-1,1),vel.z+random(1,2), 0,168);
		BEXP EEE 2 bright A_FadeOut(0.3);
		POB1 A 0
		{
			A_SetSize(-1,8);
			A_SetScale(0.7);
			A_SetRenderstyle(1,Style_Normal);
			setstatelabel("dying");
			A_GiveInventory("Heat",6660);
			bshootable=true;
			bpushable=false;
			bbright=false;
		}
	dying:
		POB1 AAAAAAAAAAAAAAAAA 30{
			A_Immolate(self,self.target,random(24,48));
			if(!random(0,1))A_SpawnChunks("HDSmokeChunk",1,2,12);
		}
		POB1 A -1{
			A_SetRenderstyle(1,Style_Normal);
			A_StartSound("vile/firestrt",CHAN_AUTO,volume:0.4);
			if(!random(0,4))A_HDBlast(
				random(12,128),random(2,4),64,"Balefire"
			);
			A_SpawnChunks("HDSmoke",8,4,12);
		}
	}
}