enum BiomechanoidConstants
{
	BIO_MECH_LEFT  = 0,
	BIO_MECH_RIGHT = 1,
	BIO_MECH_BOTH  = 2,
};

class BiomechanoidMinor : HDREArachnotron
{
	// Projectile to fire. 
	class<actor> blast;
	property blast : blast;
	
	// Flags that determine whether
	// this actor is flying. 
	
	// Jetpack was on?
	bool bwason;
	
	// Is flying?
	bool bflying;
	
	// Lacks room to fly?
	bool cantfly;
	
	// This state can/cannot fly. 
	bool statecantfly;
	
	int batterybuffer;
	

	// Firing code. 
	int volley_i;
	
	// Time to wait,
	int windup_i;
	
	// Offsets for plasma.
	int shootheight;
	int shootwidth;
	double dodgedir;

	int panicflytimer;
	default
	{
		Health 500;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 50;
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		+hdmobbase.climber;
		maxdropoffheight 64;
		maxstepheight 10;
		+missilemore;
		+missileevenmore;
		-hdmobbase.headless;
		minmissilechance 2;
		tag "Biomech (Minor)";
		SeeSound    "baby/sight";
		PainSound   "baby/pain";
		DeathSound  "baby/death";
		ActiveSound "baby/active";
		Obituary "%o suffered a death in see-minor.";
		BiomechanoidMinor.Blast "biomechanoidPlasma";
	}
	
	override void A_HDChase(
		statelabel meleestate,
		statelabel missilestate,
		int flags,
		double speedmult
	){
		super.A_HDChase(meleestate,missilestate,flags,speedmult);
	}
	
	
	
	virtual void A_FireProjectile(int type)
	{
					
		volley_i--;
		a_facetarget();
		switch(type)
		{
		
			case BIO_MECH_LEFT:
				A_StartSound("weapons/plasmaf",CHAN_WEAPON,CHANF_OVERLAP,volume:1,attenuation:2.);
				A_SpawnProjectile(Blast,shootheight,-shootwidth,0);
				break;
			
			case BIO_MECH_RIGHT:
				A_StartSound("weapons/plasmaf",CHAN_WEAPON,CHANF_OVERLAP,volume:1,attenuation:2.);
				A_SpawnProjectile(Blast,shootheight,shootwidth,0);
				break;
				
			case BIO_MECH_BOTH:
				battery--;
				volley_i--;
				A_StartSound("weapons/plasmaf",CHAN_WEAPON,CHANF_OVERLAP,volume:1,attenuation:2.);
				A_StartSound("weapons/plasmaf",CHAN_WEAPON,CHANF_OVERLAP,volume:1,attenuation:2.);
				A_SpawnProjectile(Blast,shootheight,shootwidth,0);
				A_SpawnProjectile(Blast,shootheight,-shootwidth,0);
				// CMF_AIMDIRECTION,pitch=self.pitch
				break;
		}
	}

	
	virtual void A_FlightSideEffects()
	{
	
		
		
		// velocity. 
		double rawthrust=0.00001*3;
		double zzz=max(rawthrust,(16384+floorz-pos.z))*(rawthrust);
	
		// VFX
		int chn=(level.time&(1|2));
		for(int i=0;i<1;i++)
		{
			A_StartSound(!chn?"jetpack/bang":"jetpack/fwoosh",chn/2,pitch:1+0.2*chn);
			if(!chn)
			{
					let bbb=spawn("HDExplosion",(pos.xy,pos.z-20),ALLOW_REPLACE);
					bbb.vel.z-=20;
					bbb.vel.xy+=angletovector(angle+angle,6);
					bbb.deathsound="jetpack/bang";
			}
		}

		// Movement damage.
		blockthingsiterator itt=blockthingsiterator.create(self,128);
		while(itt.Next())
		{
				actor it=itt.thing;
				if(
					it.bdontthrust
					||it==self
					||(!it.bsolid&&!it.bshootable)
					||!it.mass
					||it.pos.z>pos.z
				)continue;
				double thrustamt=max(0,(1024+it.pos.z-pos.z)*rawthrust)*10/it.mass;
				it.vel+=(it.pos-pos).unit()*thrustamt;
				it.A_GiveInventory("Heat",int(thrustamt*frandom(1,30)));
				if(!random(0,10))
				{
					HDActor.ArcZap(it);
					it.damagemobj(it,self,int(thrustamt*frandom(10,40)),"electrical");
				}
				if(it)it.damagemobj(it,self,int(thrustamt*frandom(5,30)),"bashing");
		}
	
	}
	
	virtual void A_TryFly()
	{
	
		// Ignition sounds. 
		if(!bwason)
		{
			A_StartSound("jetpack/on",CHAN_WEAPON);
			bwason = true;
		}
		else if(!bflying && bwason)
		{
			A_StartSound("jetpack/off",CHAN_WEAPON);
			bwason = false;
		}
		
		// Prevents flying when bflying is disabled. 
		if(!bwason && !bflying)
		{
			return;
		}
		
		
		// Movement while flying.
		bfloat = true;
		
		
		// velocity. 
		double rawthrust=0.00001*3;
		double zzz=max(rawthrust,(16384+floorz-pos.z))*(rawthrust);
		
		// Everything else. 
		if(vel.xy!=(0,0))
		{
			if(vel.x>0)vel.x-=min(0.1,vel.x);else vel.x-=max(-0.1,vel.x);
			if(vel.y>0)vel.y-=min(0.1,vel.y);else vel.y-=max(-0.1,vel.y);
		}
		vel.z+=zzz;
		
		A_FlightSideEffects();
	}
	
	
	
	override void postbeginplay()
	{
		super.postbeginplay();
		
		// So they fit into spaces that arachnotrons normally do. 
		resize(0.65,0.80);
		shootheight = height*0.60;
		shootwidth  = radius*0.50;
		batterybuffer = 65;
	}
	
	
	override void tick()
	{
		super.tick();
		if(isfrozen())return;		
		
		
		
		if(!statecantfly)
		{
			// Ceiling check. Becomes more reckless the closer 
			// to death the actor is. 
			if(pos.z > ceilingz - shootheight * (3 * health/500))
			{
				cantfly = true;
			}
			else
			{
				cantfly = false;
			}

			// Flying. 
			if(!cantfly)
			{
			
				// Start and end times for flying. 
				if(!bflying)
				{
					if(target && (target.pos.z > pos.z + height))
					{
						bflying = true;
						if(hd_debug)console.printf("[HDRE] Target Z Position: "..target.pos.z);
						if(hd_debug)console.printf("[HDRE] Mech Z Position: "..pos.z);

					}
					else
					{
						bflying = false;
					}
					
					if(bflying || bwason)A_TryFly();
				}
				else
				{
					if(target && (target.pos.z > pos.z + height * 0.5))
					{
						bflying = true;
						if(hd_debug)console.printf("[HDRE] Target Z Position: "..target.pos.z);
						if(hd_debug)console.printf("[HDRE] Mech Z Position: "..pos.z);
					}
					else
					{
						bflying = false;
					}
					if(bflying || bwason)A_TryFly();
				}
			}
			
			if(bflying)
			{
				batterybuffer--;
				if(batterybuffer<1)
				{
					batterybuffer = 65; battery--;
				}
			}
			else
			{
				bfloat = false;
				
				// Hover down.
				if(vel.z < -3 && batterybuffer > 0)
				{
						A_FlightSideEffects();
						// velocity. 
						double rawthrust=0.00001;
						double zzz=max(rawthrust,(16384+floorz-pos.z))*(rawthrust);
						
						// Everything else. 
						if(vel.xy!=(0,0))
						{
							if(vel.x>0)vel.x-=min(0.1,vel.x);else vel.x-=max(-0.1,vel.x);
							if(vel.y>0)vel.y-=min(0.1,vel.y);else vel.y-=max(-0.1,vel.y);
						}
						vel.z+=zzz;
						batterybuffer--;
				}
			}
		}
	}
	
	
	States
	{
		AmbushRotate:
			---- A 0 A_StartSound("baby/walk");
			BIOM A 8 A_HDLook();
			BIOM B 8 A_SetAngle(angle+frandom(-12,12));
			BIOM C 8 A_HDLook();
			BIOM D 8 A_SetAngle(angle+frandom(-12,12));
		Ambush:
			BIOM C 10 A_HDLook();
			---- A 0 A_Jump(28,"ambushrotate");
		Spawn:
			BIOM A 0 A_JumpIf(bambush,"ambush");
			BIOM CCC 10 A_HDLook();
			---- A 0 A_Jump(192,"spawn","ambushrotate");
		SpawnWander:
			BIOM ABC 8 A_HDWander();
			---- A 0 A_SetAngle(angle+frandom(-8,8));
			BIOM DEE 8 A_HDWander();
			---- A 0 A_SetAngle(angle+frandom(-8,8));
			---- A 0 A_Jump(28,"spawn");
			loop;
			
		See:
			#### # 0
			{
				volley_i = random(4,7);
			}
		SeeLoop:
			#### # 0
			{
				statecantfly=false;
			}
			#### # 0 A_Jump(78, "roam");
			BIOM AABBCCDD 3 A_HDChase();
			Loop;
	roam:
	    #### # 0
		{
			statecantfly=true;
		}
		BIOM AB 6 A_HDWander();
		BIOM C 6 A_HDWander(CHF_LOOK);
		---- A 0 A_Jump(48,"roamc");
	roam2:
		BIOM D 6 A_HDWander(CHF_LOOK);
		BIOM EE 6 A_HDWander();
		---- A 0 A_Jump(48,"roamf");
		---- A 0 A_JumpIfTargetInLOS("roamc");
		goto roam;
	roamc:
		BIOM C 4 A_HDChase("missile","missile",CHF_DONTMOVE);
		BIOM CCC 2 A_HDChase("missile","missile",CHF_DONTMOVE);
		---- A 0 A_Jump(48,1);
		loop;
		---- A 0 A_StartSound("baby/walk");
		goto roam2;
	roamf:
		BIOM E 4 A_HDChase("missile","missile",CHF_DONTMOVE);
		BIOM EEE 2 A_HDChase("missile","missile",CHF_DONTMOVE);
		---- A 0 A_Jump(48,"roam");
		loop;
			
		Melee:
		Missile:
			#### # 0
			{
				dodgedir = frandom(-2,2);
				windup_i = random(20, 23) + (500/invoker.health)/10;
			}
			// Windup.
		MissileLoop:
			BIOM E 0
			{	
				statecantfly=false;
				A_SetTics(random(2,3));
				A_FaceTarget();
				windup_i--;
				
				if(windup_i==1)
				{
					float multiplier = 0.25;
					if(batterybuffer > 5)
					{
						multiplier = 2;
						batterybuffer-=5;
					}

					double rl=angle+90;
					vel.x+=cos(rl)*dodgedir * 4;
					vel.y+=sin(rl)*dodgedir * 4;
					A_FlightSideEffects();
				}
				else if(windup_i<1)
				{
					A_FlightSideEffects();
				}
			}
			#### # 0 A_JumpIf(windup_i>1, "MissileLoop");
		
		MissileFire:
			// Checks if there's geometry in the way. 
			#### # 0 A_SpidRefire;
			// Decider.
			BIOM E 0
			{
				A_FaceTarget();
				
				// Check to see if a reload must happen. 
				if(battery<1)
				{
					setstatelabel("MustReload");
					return;
				}
				
				// Decrement battery.
				battery--;
				
				// Reset if the volley accumulator is 0.
				if(!volley_i)
				{
					setstatelabel("See");
					return;
				}

				// Fire both if divisible by 3. 
				if(!(volley_i%3))
				{
					setstatelabel("ShootBoth");
					return;
				}

				// Fire right if divisible by 2. 
				if(!(volley_i%2))
				{
					setstatelabel("ShootRight");
					return;
				}

				// Fire left otherwise. 
				setstatelabel("ShootLeft");
				return;
			}
			Goto See;

		ShootLeft:
			BIOM E 1
			{
				a_facetarget();
			}
			BIOM H 3 {Invoker.A_FireProjectile(BIO_MECH_LEFT);}
			goto MissileLoop;

		ShootRight:
			BIOM E 1
			{
				a_facetarget();
			}
			BIOM G 3 {Invoker.A_FireProjectile(BIO_MECH_RIGHT);}
			goto MissileLoop;

		ShootBoth:
			BIOM E 1
			{
				a_facetarget();
			}
			BIOM F 0;
			BIOM F 3 {Invoker.A_FireProjectile(BIO_MECH_BOTH);}
			goto MissileLoop;

	mustreload:
		#### # 0
		{
			statecantfly=true;
		}
		BIOM E 10;
	reload:
		BIOM ABCDEE 4 A_HDChase(null,null,CHF_FLEE);
		BIOM AA 2 A_StartSound("baby/walk",CHAN_BODY);
		BIOM AAAAAAAA 6{
			vector3 bbb=pos+((cos(angle),sin(angle))*radius,42);
			for(int i=0;i<3;i++){
				double aaa=frandom(0,360);
				double ppp=frandom(-90,70);
				double cp=cos(ppp);
				vector3 vvv=(cp*cos(aaa),cp*sin(aaa),-sin(ppp));
				vector3 vvv2=vvv*frandom(20,40);
				
				if(random(0,1))
				{
					let fff=spawn("FragShard",bbb+vvv2,ALLOW_REPLACE);
					fff.vel=vel-vvv;
				}
			}
			A_StartSound("weapons/plasidle",CHAN_WEAPON,CHANF_OVERLAP);
			battery+=2;
		}
		BIOM A 8 A_StartSound("baby/sight",CHAN_WEAPON,CHANF_OVERLAP);
		BIOM A 0
		{
			battery=20;
		}
	reloadend:
		goto see;


		Pain:
			#### # 0
			{
				statecantfly=true;
			}
			#### # 0
			{
				volley_i = 0;
			}
			BIOM B 2;
			BIOM B 2 A_Vocalize(painsound);
		Goto See;
		

	death:
		#### # 0
		{
			statecantfly=true;
		}
	deathactual:
		BIOM AAAAAAAA 0 A_SpawnItemEx("HugeWallChunk",frandom(-4,4),frandom(-4,4),frandom(28,34),frandom(-6,6),frandom(-6,6),frandom(-2,16),0,160,0);
		BIOM AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BigWallChunk",frandom(-3,3),frandom(-3,3),frandom(28,34),frandom(-2,2),frandom(-2,2),frandom(2,14),0,160,0);
		BIOM J 4     A_Scream();
		BIOM J 6     A_SpawnItemEx("MegaBloodSplatter",frandom(-10,10),frandom(-10,10),shootheight/2,0,0,0,0,160,0);
		BIOM J 10    A_SpawnItemEx("MegaBloodSplatter",frandom(-4,4),frandom(-4,4),shootheight/2,0,0,0,0,160,0);
		BIOM KLLLL 7
		{
			A_HDBlast(
			pushradius:56,pushamount:18,fullpushradius:6,
			immolateradius:18,immolateamount:random(3,6),
			immolatechance:80
			);
			A_SpawnItemEx("MegaBloodSplatter",0,0,shootheight/2,0,0,0,0,160,0);
		}
		BIOM L 0 A_SpawnItemEx("MegaBloodSplatter",0,0,shootheight/4,0,0,0,0,160,0);
		BIOM L 7;
		BIOM L -1 A_BossDeath();
	xdeath:
		stop;
		
	raise:
		#### # 0
		{
			statecantfly=true;
		}
		BIOM LLLLLKJ 5;
		BIOM I 8;
		BIOM I 0 A_StartSound(seesound);
		BIOM AAABB 3 A_Chase(null,null);
		#### A 0 A_Jump(256,"see");
	death.maxphdrain:
		#### # 0
		{
			statecantfly=true;
		}
		---- AAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BigWallChunk",frandom(-3,3),frandom(-3,3),frandom(28,34),frandom(-2,2),frandom(-2,2),frandom(2,14),0,160,0);
		BIOM J 10;
		BIOM KL 7;
		BIOM L -1;
	}
}
