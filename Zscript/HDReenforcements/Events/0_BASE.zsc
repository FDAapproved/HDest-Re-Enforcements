class HDREEvent : eventhandler
{

	// Welcome... to your doom. 
	HDRESpawnOrganizer DoomMaster;


	private bool cvarsAvailable;
	private bool isObvious;
	
	
	
	
	// Shoves cvar values into their non-cvar shaped holes.
	// I have no idea why names for cvars become reserved here.
	// But, this works. So no complaints. 
	void init()
	{

		cvarsAvailable = true;
		DoomMaster = HDRESpawnOrganizer(new('HDRESpawnOrganizer'));
		
		// Biomechanoids. 
		DoomMaster.addReplacement("BiomechanoidMinor", "TechnoSpider", bio_spawn_bias,       bio_persistent_spawning);
		DoomMaster.addReplacement("BiomechanoidMajor", "TechnoSpider", bio_major_spawn_bias, bio_persistent_spawning);
		
		// Mimic Barrels and Cans
		DoomMaster.addReplacement("MimicBarrel", "HDBarrel",  brl_barrel_spawn_bias,  brl_persistent_spawning);
		DoomMaster.addReplacement("MimicCan",    "HDFireCan", brl_firecan_spawn_bias, brl_persistent_spawning);	
	}
	
	
	// 'Initalizes' the event handler,
	// In my testing, this is called after events are fired. 
	override void WorldLoaded(WorldEvent e)
	{
		// always calls init.
		if(!cvarsAvailable)
			init();
		super.WorldLoaded(e);
	}

override void checkreplacement(replaceevent e)
 {
	// Makes sure the values are always loaded before
	// taking in events.
	if(!cvarsAvailable)
		init();
		
 	// in case it's not real. 
	if(!e.Replacee)
	{
		return;
	}
	
	e.replacement = DoomMaster.getReplacement(e.replacee.GetClassName());
	
}


// Definitely add a whitelist to this so it doesn't call nearly as often. 
override void checkreplacee(replacedevent e)
{
	if(e.replacee)
	{
		//console.printf(e.replacee.GetClassName());
		e.replacee = DoomMaster.getReplacee(e.replacement.GetClassName(), e.replacee.GetClassName());
	}
	// I guess if replacee doesn't exist we leave it nulled? Weird. 
	else
	{
		//console.printf("Checking unsigned replacedevent.");
		e.replacee = DoomMaster.getReplacee(e.replacement.GetClassName(), "");
	}
}

}