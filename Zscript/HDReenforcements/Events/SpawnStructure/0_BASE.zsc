// Object for recovering spawntable entries.
class HDRESpawnOrganizer play
{
	// holds entries. 
	array<HDRESpawnBucket> table;
	
	// What we're replacing. Used for a few comparisons. 
	array<string>          replacing;
	
	// appends a new entry. 
	virtual bool addReplacement(string replacer, string replacee, int threshold, bool persistent)
	{
		// We don't want to deal with values that aren't sanitized for this. 
		replacer = replacer.makelower();
		replacee = replacee.makelower();
		
		bool result   = true;
		bool finished = false;
		bool wrote    = false;
		bool seen     = false;
		HDRESpawnBucket ptr;
		
		int i = 0;
		int j = table.Size();
		int k = 0;
		int l = replacing.Size();
		
		
		// init the table if it doesn't exist yet. 
		if(j == 0)
		{
			table.push(HDRESpawnBucket(new('HDRESpawnBucket')));
			table[0].setReplacee(replacee);
			j++;
		}
		
		
		
		// loop through the addReplacement table to see what's there. 
		for(i = 0; ((i < j) && !finished); i++)
		{
			// if we find the class name mentioned, add it. 
			if(table[i].getReplacee() == replacee)
			{
				result   = result && table[i].addReplacement(replacer, replacee, threshold, persistent);
				wrote    = true;
				finished = true;
			}
		}
		
		// If we didn't find the replacee, make a new category and append it. 
		if(!wrote)
		{
			ptr = HDRESpawnBucket(new('HDRESpawnBucket'));
			result = result && ptr.addReplacement(replacer, replacee, threshold, persistent);
			table.push(ptr);
		}
		
		
		
		// For caching what classes we should pay attention to for replacedevents.
		finished = false;
		for(k = 0; ((k < l) && !finished); k++)
		{
			if(replacing[k] == replacer)
			{
				finished = true;
				seen = true;
			}
		}
		if(seen == false)
		{
			replacing.push(replacer);
		}
		
		
		
		// Return the status of the function and it's nested calls. 
		return result;
	}
	
	// Whether or not something could be spawned. 
	virtual bool couldSpawn(HDRESpawnStructure entry)
	{
		return ((entry.getThreshold() != -1) && entry.getPersistent());
	}
	
	virtual string trySpawnSingle(HDRESpawnStructure entry)
	{
		string result = entry.getReplacee();
		
		// temp storage for the random value. 
		int chance = random[hdre](0, entry.getThreshold());
		
		if(chance == 0)
		{
			result = entry.getReplacer();
		}
		
		return result;
	}	
	
	virtual string trySpawnBucket(int index)
	{
		string result = table[index].getReplacee();
		bool finished = false;
		int i = 0;
		int j = table[index].table.Size();
		int lastweight;
		
		for(i = 0; i < j; i++)
		{
			if(table[index].table[i].couldSpawn())
			{
				result = trySpawnSingle(table[index].table[i]);
			}
		}
		return result;
	}
	

	
	virtual string handleSpawns(string replacee)
	{
		replacee = replacee.makelower();
		string result = replacee;
		int i = 0;
		int j = table.Size();
		
		bool finished = false;
		
		// Go through each bucket.
		for(i = 0; ((i < j) && !finished); i++)
		{
			// Try to spawn the bucket's contents if the names match. 
			if(table[i].getReplacee() == replacee)
			{
				result = trySpawnBucket(i);
				finished = true;
			}
		}
		return result;
	}
	
	virtual string getReplacee(string replacement, string replacee)
	{
		replacement = replacement.makelower();
		replacee    = replacee.makelower();
		
		string result = replacee;
		int i = 0;
		int j = table.Size();
		int k = 0;
		int l = replacing.Size();
		
		bool finished = false;
		bool seen     = false;
		
		// Check to see if we should check this class at all. 
		for(k = 0; ((k < l) && !finished); k++)
		{
			if(replacing[k] == replacement)
			{
				//console.printf("Saw replacement.");
				finished = true;
				seen     = true;
			}
		}
		
		
		k = 0;
		l = 0;
		
		// Keep going if we saw the replacement. 
		if(seen)
		{
			finished = false;
		}
		else
		{
			finished = true;
		}
		
		
		
		// Go through each bucket.
		for(i = 0; ((i < j) && !finished); i++)
		{
			// Go through the contents of each bucket.
			l = table[i].table.Size();
			for(k = 0; ((k < l) && !finished); k++)
			{
				// Check to see if the class we're looking for exists. 
				if(table[i].table[k].getReplacer() == replacement)
				{
					result = table[i].table[k].getReplacee();
				}			
			}
		}
		return result;
	}
}