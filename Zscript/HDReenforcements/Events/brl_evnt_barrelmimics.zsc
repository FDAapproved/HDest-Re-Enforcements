//------------------------------------------------------------------------------
// You thought fire was bad? You sweet, wooden barrel. 
//------------------------------------------------------------------------------

class RealKillerBarrelEvent : eventhandler
{

	private int  barrelSpawnBiasActual;
	private int  barrelBaleSpawnBiasActual;
	private int  canSpawnBiasActual;
	private int  canFireSpawnBiasActual;
	private bool isPersistent;
	private bool isObvious;
	private bool cvarsAvailable;


	
	// Shoves cvar values into their non-cvar shaped holes.
	// I have no idea why names for cvars become reserved here.
	// But, this works. So no complaints. 
	void init()
	{
		barrelSpawnBiasActual     = brl_barrel_spawn_bias;
		barrelBaleSpawnBiasActual = brl_barrel_bale_bias;
		canSpawnBiasActual        = brl_firecan_spawn_bias;
		canFireSpawnBiasActual    = brl_firecan_fire_bias;
		isPersistent              = brl_persistent_spawning;
		isObvious                 = brl_obviousness;
		cvarsAvailable = true;
	}

	// 'Initalizes' the event handler,
	// In my testing, this is called after events are fired. 
	override void WorldLoaded(WorldEvent e)
	{
		// always calls init.
		init();
		super.WorldLoaded(e);
	}

	bool giverandom(int chance)
	{
		bool result = false;
		
		// temp storage for the random value. 
		int iii = random(0, chance);
		
		// force negative values to be 0. 
		if(iii < 0)
			iii = 0;
			
		
		if (iii == 0)
		{
			if(chance > -1)
				result = true;
		}
		
		return result;
	}

	void trycreatebarrel(worldevent e, int chance, int balechance=-1, bool obvious=false)
	{
		if(giverandom(chance))
		{

			let aaa = MimicBarrel(e.thing.Spawn("MimicBarrel", e.thing.pos, SXF_TRANSFERSPECIAL | SXF_NOCHECKPOSITION));
			if(giverandom(balechance))
			{
				aaa.musthavegremlin = 1;
			}
			else if (balechance == -1)
			{
				aaa.musthavegremlin = -1;
			}
			else if (balechance != -2)
			{
				aaa.musthavegremlin = -1;
			}
			
			if(obvious)
				aaa.bisobvious = true;
			
			e.thing.destroy();
		}
	}

	void trycreatecan(worldevent e, int chance, int balechance=-1, bool obvious=false)
	{
		if(giverandom(chance))
		{
			let aaa = MimicCan(e.thing.Spawn("MimicCan", e.thing.pos, SXF_TRANSFERSPECIAL | SXF_NOCHECKPOSITION));
			if(giverandom(balechance))
			{
				aaa.musthavegremlin = 1;
			}
			else if (balechance == -1)
			{
				aaa.musthavegremlin = -1;
			}
			else if (balechance != -2)
			{
				aaa.musthavegremlin = -1;
			}
			
			if(obvious)
				aaa.bisobvious = true;
			
			e.thing.destroy();
		}
	}

override void worldthingspawned(worldevent e)
  {
	// Makes sure the values are always loaded before
	// taking in events.
	if(!cvarsAvailable)
		init();
		
 	// in case it's not real. 
	if(!e.Thing)
	{
		return;
	}
	
	// Don't spawn anything if the level has been loaded more than a tic. 
	if (!(level.maptime > 1) || isPersistent)
	{
		let bbb = HDBarrel(e.thing);
		if(bbb && !(e.thing is "MimicBarrel"))
		{
				if(!(e.thing is "HDFireCan"))
					trycreatebarrel(e, barrelSpawnBiasActual, barrelSpawnBiasActual, isObvious);
				else
					trycreatecan(e, canSpawnBiasActual, canFireSpawnBiasActual, isObvious);
		}
	}
	}
}