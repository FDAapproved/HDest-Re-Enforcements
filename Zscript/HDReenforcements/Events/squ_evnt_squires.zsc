
class HellSquireEvent : eventhandler
{


	private bool cvarsAvailable;

	private int spawnBiasActual;
	private int fireballersSpawnBiasActual;
	private int healersSpawnBiasActual;
	private bool isPersistent;
	
	// Shoves cvar values into their non-cvar shaped holes.
	// I have no idea why names for cvars become reserved here.
	// But, this works. So no complaints. 
	void init()
	{
		cvarsAvailable = true;
		spawnBiasActual            = squ_regulars_spawn_bias;
		fireballersSpawnBiasActual = squ_fireballers_spawn_bias;
		healersSpawnBiasActual     = squ_healers_spawn_bias;
		isPersistent               = squ_persistent_spawning;
	}

	// 'Initalizes' the event handler,
	// In my testing, this is called after events are fired. 
	override void WorldLoaded(WorldEvent e)
	{
		// always calls init.
		init();
		super.WorldLoaded(e);
	}

	bool giverandom(int chance)
	{
		bool result = false;
		
		// temp storage for the random value. 
		int iii = random(0, chance);
		
		// force negative values to be 0. 
		if(iii < 0)
			iii = 0;
			
		
		if (iii == 0)
		{
			if(chance > -1)
				result = true;
		}
		
		return result;
	}

	void trycreatesquire(worldevent e, int chance)
	{
		if(giverandom(chance))
		{
			let sss = HDHellSquire(e.thing.Spawn("HDHellSquire", e.thing.pos, SXF_TRANSFERSPECIAL | SXF_NOCHECKPOSITION));
			if(sss)
			{
				
				e.thing.destroy();
			}
			


		}
	}


override void worldthingspawned(worldevent e)
  {
	// Makes sure the values are always loaded before
	// taking in events.
	if(!cvarsAvailable)
		init();
		
 	// in case it's not real. 
	if(!e.Thing)
	{
		return;
	}
	
	// Don't spawn anything if the level has been loaded more than a tic. 
	if (!(level.maptime > 1) || isPersistent)
	{
		switch(e.Thing.GetClassName())
		{
			case 'Serpentipede':
				trycreatesquire(e, spawnBiasActual);
				break;
			case 'Ardentipede':
				trycreatesquire(e, fireballersSpawnBiasActual);
				break;
			case 'Regentipede':
				trycreatesquire(e, healersSpawnBiasActual);
				break;
			
		}
	}
	}
}